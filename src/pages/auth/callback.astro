---
import Layout from '../../layouts/Layout.astro';
import AuthenticationProvider from '../../components/AuthenticationProvider.astro';
---

<Layout title="Authentication - noqodi Docs">
    <AuthenticationProvider />
    
    <main class="auth-callback-page">
        <div class="auth-callback-container">
            <div class="auth-callback-loading">
                <div class="loading-spinner"></div>
                <h1>Completing sign in...</h1>
                <p>Please wait while we complete your authentication.</p>
            </div>
            
            <div class="auth-callback-error" id="auth-error" style="display: none;">
                <div class="error-icon">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="10"></circle>
                        <line x1="15" y1="9" x2="9" y2="15"></line>
                        <line x1="9" y1="9" x2="15" y2="15"></line>
                    </svg>
                </div>
                <h1>Authentication Failed</h1>
                <p id="error-message">There was an error completing your sign in. Please try again.</p>
                <div class="error-actions">
                    <a href="/" class="retry-button">Return to Home</a>
                    <button id="retry-auth" class="retry-button primary">Try Again</button>
                </div>
            </div>
            
            <div class="auth-callback-success" id="auth-success" style="display: none;">
                <div class="success-icon">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="20,6 9,17 4,12"></polyline>
                    </svg>
                </div>
                <h1>Welcome back!</h1>
                <p>You have been successfully signed in. Redirecting you now...</p>
            </div>
        </div>
    </main>
</Layout>

<script>
document.addEventListener('DOMContentLoaded', async () => {
    const loadingEl = document.querySelector('.auth-callback-loading');
    const errorEl = document.getElementById('auth-error');
    const successEl = document.getElementById('auth-success');
    const errorMessage = document.getElementById('error-message');
    const retryButton = document.getElementById('retry-auth');
    
    function showSection(section) {
        document.querySelectorAll('.auth-callback-container > div').forEach(el => {
            el.style.display = 'none';
        });
        if (section) section.style.display = 'block';
    }
    
    function handleAuthError(error) {
        console.error('Authentication callback error:', error);
        if (errorMessage) {
            errorMessage.textContent = error.message || 'An unexpected error occurred during authentication.';
        }
        showSection(errorEl);
    }
    
    function handleAuthSuccess() {
        showSection(successEl);
        
        setTimeout(() => {
            const returnUrl = sessionStorage.getItem('auth_return_url') || '/en';
            window.location.href = returnUrl;
        }, 2000);
    }
    
    if (retryButton) {
        retryButton.addEventListener('click', () => {
            if (window.noqodiAuth) {
                window.noqodiAuth.login();
            } else {
                window.location.href = '/';
            }
        });
    }
    
    window.addEventListener('auth:login', handleAuthSuccess);
    window.addEventListener('auth:error', (event) => {
        handleAuthError(event.detail.error);
    });
    
    const urlParams = new URLSearchParams(window.location.search);
    const error = urlParams.get('error');
    const errorDescription = urlParams.get('error_description');
    
    if (error) {
        handleAuthError({
            message: errorDescription || `Authentication error: ${error}`
        });
        return;
    }
    
    const authCode = urlParams.get('code');
    const state = urlParams.get('state');
    
    if (!authCode || !state) {
        handleAuthError({
            message: 'Missing required authentication parameters. Please try signing in again.'
        });
        return;
    }
    
    const timeout = setTimeout(() => {
        handleAuthError({
            message: 'Authentication is taking longer than expected. Please try again.'
        });
    }, 30000);
    
    try {
        if (window.noqodiAuth) {
            await window.noqodiAuth.init();
        } else {
            throw new Error('Authentication system not initialized');
        }
        
        clearTimeout(timeout);
        
    } catch (error) {
        clearTimeout(timeout);
        handleAuthError(error);
    }
});
</script>

<style>
    .auth-callback-page {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #f6f9fc 0%, #ffffff 100%);
        padding: 2rem;
    }
    
    .auth-callback-container {
        max-width: 500px;
        width: 100%;
    }
    
    .auth-callback-loading,
    .auth-callback-error,
    .auth-callback-success {
        background: white;
        border-radius: 16px;
        padding: 3rem 2rem;
        text-align: center;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        border: 1px solid #e2e8f0;
    }
    
    .loading-spinner {
        width: 48px;
        height: 48px;
        border: 4px solid #f3f4f6;
        border-top: 4px solid #635bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 2rem;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .error-icon {
        color: #dc2626;
        margin-bottom: 2rem;
    }
    
    .success-icon {
        color: #059669;
        margin-bottom: 2rem;
    }
    
    h1 {
        color: #1e293b;
        font-size: 1.75rem;
        font-weight: 700;
        margin-bottom: 1rem;
        line-height: 1.2;
    }
    
    p {
        color: #64748b;
        font-size: 1.1rem;
        line-height: 1.6;
        margin-bottom: 2rem;
    }
    
    .error-actions {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
    }
    
    .retry-button {
        padding: 12px 24px;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 500;
        text-decoration: none;
        cursor: pointer;
        transition: all 0.15s ease;
        border: 1px solid #e2e8f0;
        background: white;
        color: #64748b;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: 120px;
    }
    
    .retry-button:hover {
        background: #f8fafc;
        color: #334155;
        transform: translateY(-1px);
    }
    
    .retry-button.primary {
        background: #635bff;
        color: white;
        border-color: #635bff;
    }
    
    .retry-button.primary:hover {
        background: #5a52ff;
        border-color: #5a52ff;
        box-shadow: 0 4px 12px rgba(99, 91, 255, 0.25);
    }
    
    @media (max-width: 640px) {
        .auth-callback-page {
            padding: 1rem;
        }
        
        .auth-callback-loading,
        .auth-callback-error,
        .auth-callback-success {
            padding: 2rem 1.5rem;
        }
        
        h1 {
            font-size: 1.5rem;
        }
        
        p {
            font-size: 1rem;
        }
        
        .error-actions {
            flex-direction: column;
            align-items: center;
        }
        
        .retry-button {
            width: 100%;
            max-width: 200px;
        }
    }
</style>