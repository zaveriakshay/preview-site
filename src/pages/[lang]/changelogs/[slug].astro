---
import Layout from '../../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import { 
    getChangelogEntries, 
    getChangelogEntry,
    formatChangelogDate,
    getTypeLabel,
    getCategoryLabel,
    extractDocumentInfo,
    type ChangelogEntry,
    type DocumentInfo
} from '../../../utils/changelog.ts';

export const prerender = true;

export async function getStaticPaths() {
    const paths = [];
    const allDocs = await getCollection('docs');
    
    // Generate paths for both languages
    for (const lang of ['en', 'ar']) {
        try {
            const changelogDocs = allDocs.filter(doc => {
                const pathParts = doc.id.split('/');
                return pathParts.length >= 2 && 
                       pathParts[0] === lang && 
                       pathParts[1] === 'changelogs' && 
                       doc.id.endsWith('.md') &&
                       !doc.id.endsWith('index.md');
            });
            
            for (const doc of changelogDocs) {
                const { Content } = await doc.render();
                const pathParts = doc.id.split('/');
                const filename = pathParts[pathParts.length - 1];
                const slug = filename.replace('.md', '');
                
                paths.push({
                    params: { 
                        lang, 
                        slug 
                    },
                    props: { 
                        entry: {
                            id: doc.id,
                            title: doc.data.title || 'Untitled Change',
                            date: doc.data.date || new Date().toISOString().split('T')[0],
                            version: doc.data.version,
                            type: doc.data.type || 'platform',
                            category: doc.data.category || 'update',
                            author: doc.data.author || 'noqodi Team',
                            tags: doc.data.tags || [],
                            slug,
                            content: doc.body || '',
                            Content // The rendered component
                        }
                    }
                });
            }
        } catch (error) {
            console.error(`Error generating changelog paths for ${lang}:`, error);
            // Continue with other languages instead of failing completely
        }
    }
    
    return paths;
}

const { lang, slug } = Astro.params;
const { entry } = Astro.props as { entry: ChangelogEntry & { Content?: any } };
const language = lang || 'en';

if (!entry) {
    return Astro.redirect(`/${language}/changelogs`);
}

const isRTL = language === 'ar';

// Get the Content component for rendering
const { Content } = entry;

// Get the raw content collection entry to extract document information
let documentInfo: DocumentInfo | null = null;
try {
    const docs = await getCollection('docs');
    const rawDoc = docs.find(doc => doc.id === entry.id);
    if (rawDoc) {
        documentInfo = extractDocumentInfo(rawDoc.body);
    } else {
        // Fallback: try to extract from entry.content (processed content)
        documentInfo = extractDocumentInfo(entry.content);
    }
} catch (error) {
    console.error('Error extracting document info:', error);
    // Final fallback: try entry.content
    try {
        documentInfo = extractDocumentInfo(entry.content);
    } catch (fallbackError) {
        console.error('Fallback extraction also failed:', fallbackError);
    }
}

// Get related entries (same type, exclude current)
const allEntries = await getChangelogEntries(language);
const relatedEntries = allEntries
    .filter(e => e.type === entry.type && e.slug !== entry.slug)
    .slice(0, 3);
---

<Layout title={entry.title}>
    <main class="changelog-detail-page" dir={isRTL ? 'rtl' : 'ltr'}>
        <div class="changelog-container">
            <!-- Breadcrumb -->
            <nav class="breadcrumb">
                <a href={`/${language}`}>
                    {language === 'ar' ? 'الرئيسية' : 'Home'}
                </a>
                <span class="separator">→</span>
                <a href={`/${language}/changelogs`}>
                    {language === 'ar' ? 'سجل التغييرات' : 'Change Logs'}
                </a>
                <span class="separator">→</span>
                <span class="current">{entry.title}</span>
            </nav>

            <!-- Entry Header -->
            <header class="entry-header">
                <div class="entry-meta">
                    <span class={`type-badge type-${entry.type}`}>
                        {getTypeLabel(entry.type, language)}
                    </span>
                    <span class={`category-badge category-${entry.category}`}>
                        {getCategoryLabel(entry.category, language)}
                    </span>
                    {entry.version && (
                        <span class="version-badge">
                            v{entry.version}
                        </span>
                    )}
                </div>
                
                <h1 class="entry-title">{entry.title}</h1>
                
                <div class="entry-info">
                    <time class="entry-date" datetime={entry.date}>
                        {formatChangelogDate(entry.date, language)}
                    </time>
                    <span class="entry-author">
                        {language === 'ar' ? 'بواسطة' : 'by'} {entry.author}
                    </span>
                </div>

                {entry.tags.length > 0 && (
                    <div class="entry-tags">
                        {entry.tags.map(tag => (
                            <span class="tag">{tag}</span>
                        ))}
                    </div>
                )}
            </header>

            <!-- Document Information Table -->
            {documentInfo && (
                <section class="document-info-section">
                    <h2>{language === 'ar' ? 'معلومات الوثيقة' : 'Document Information'}</h2>
                    <div class="document-info-table">
                        <table>
                            <tbody>
                                <tr>
                                    <td class="field-label">{language === 'ar' ? 'العنوان' : 'Title'}</td>
                                    <td class="field-value">{documentInfo.title}</td>
                                </tr>
                                <tr>
                                    <td class="field-label">{language === 'ar' ? 'الإصدار الحالي' : 'Current Version'}</td>
                                    <td class="field-value">{documentInfo.currentVersion}</td>
                                </tr>
                                <tr>
                                    <td class="field-label">{language === 'ar' ? 'المؤلف' : 'Author'}</td>
                                    <td class="field-value">{documentInfo.author}</td>
                                </tr>
                                <tr>
                                    <td class="field-label">{language === 'ar' ? 'تاريخ الإصدارات' : 'Version History'}</td>
                                    <td class="field-value version-history">
                                        <div set:html={documentInfo.versionHistory?.replace(/\n/g, '<br/>')}></div>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="field-label">{language === 'ar' ? 'تم التحديث بواسطة' : 'Updated By'}</td>
                                    <td class="field-value">{documentInfo.updatedBy}</td>
                                </tr>
                                <tr>
                                    <td class="field-label">{language === 'ar' ? 'تمت الموافقة بواسطة' : 'Approved By'}</td>
                                    <td class="field-value">{documentInfo.approvedBy}</td>
                                </tr>
                                <tr>
                                    <td class="field-label">{language === 'ar' ? 'الملفات ذات الصلة' : 'Related Files'}</td>
                                    <td class="field-value related-files">
                                        {documentInfo.relatedFiles?.map(file => {
                                            const linkMatch = file.match(/\[([^\]]+)\]\(([^)]+)\)/);
                                            if (linkMatch) {
                                                return (
                                                    <div class="file-link">
                                                        <a href={linkMatch[2]} target="_blank" rel="noopener">
                                                            {linkMatch[1]}
                                                        </a>
                                                    </div>
                                                );
                                            }
                                            return <div class="file-text">{file}</div>;
                                        })}
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </section>
            )}

            <!-- Entry Content -->
            <article class="entry-content">
                <div class="prose">
                    {Content ? <Content /> : <div set:html={entry.content}></div>}
                </div>
            </article>

            <!-- Related Entries -->
            {relatedEntries.length > 0 && (
                <section class="related-entries">
                    <h2>{language === 'ar' ? 'مقالات ذات صلة' : 'Related Updates'}</h2>
                    <div class="related-grid">
                        {relatedEntries.map(relatedEntry => (
                            <article class="related-entry">
                                <div class="related-meta">
                                    <span class={`type-badge type-${relatedEntry.type}`}>
                                        {getTypeLabel(relatedEntry.type, language)}
                                    </span>
                                    {relatedEntry.version && (
                                        <span class="version-badge">
                                            v{relatedEntry.version}
                                        </span>
                                    )}
                                </div>
                                <h3>
                                    <a href={`/${language}/changelogs/${relatedEntry.slug}`}>
                                        {relatedEntry.title}
                                    </a>
                                </h3>
                                <time class="related-date">
                                    {formatChangelogDate(relatedEntry.date, language)}
                                </time>
                                {relatedEntry.excerpt && (
                                    <p class="related-excerpt">{relatedEntry.excerpt}</p>
                                )}
                            </article>
                        ))}
                    </div>
                </section>
            )}

            <!-- Navigation -->
            <nav class="entry-navigation">
                <a href={`/${language}/changelogs`} class="back-link">
                    ← {language === 'ar' ? 'العودة إلى سجل التغييرات' : 'Back to Change Logs'}
                </a>
                
                <div class="share-links">
                    <span>{language === 'ar' ? 'مشاركة:' : 'Share:'}</span>
                    <a href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(entry.title)}&url=${encodeURIComponent(Astro.url.toString())}`} 
                       target="_blank" rel="noopener" class="share-link twitter">
                        Twitter
                    </a>
                    <a href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(Astro.url.toString())}`} 
                       target="_blank" rel="noopener" class="share-link linkedin">
                        LinkedIn
                    </a>
                    <button class="share-link copy" data-url={Astro.url.toString()}>
                        {language === 'ar' ? 'نسخ الرابط' : 'Copy Link'}
                    </button>
                </div>
            </nav>
        </div>
    </main>
</Layout>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // Copy link functionality
    const copyButton = document.querySelector('.share-link.copy');
    if (copyButton) {
        copyButton.addEventListener('click', async () => {
            const url = copyButton.dataset.url;
            try {
                await navigator.clipboard.writeText(url);
                const originalText = copyButton.textContent;
                copyButton.textContent = copyButton.textContent.includes('نسخ') ? 'تم النسخ!' : 'Copied!';
                setTimeout(() => {
                    copyButton.textContent = originalText;
                }, 2000);
            } catch (err) {
                console.error('Failed to copy URL:', err);
            }
        });
    }
});
</script>

<style>
    .changelog-detail-page {
        min-height: 100vh;
        background: #fafbfc;
        padding: 2rem 0;
    }

    .changelog-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 0 2rem;
    }

    .breadcrumb {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 2rem;
        font-size: 0.875rem;
        color: #6b7280;
    }

    .breadcrumb a {
        color: #635bff;
        text-decoration: none;
        transition: color 0.15s ease;
    }

    .breadcrumb a:hover {
        color: #5a52ff;
    }

    .separator {
        color: #d1d5db;
    }

    .current {
        color: #374151;
        font-weight: 500;
    }

    .entry-header {
        background: white;
        padding: 2.5rem;
        border-radius: 16px;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
        border: 1px solid #e5e7eb;
    }

    .entry-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
    }

    .type-badge, .category-badge, .version-badge {
        padding: 0.375rem 1rem;
        border-radius: 6px;
        font-size: 0.875rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .type-platform { background: #dbeafe; color: #1e40af; }
    .type-api { background: #dcfce7; color: #166534; }
    .type-sdk { background: #fef3c7; color: #92400e; }
    .type-documentation { background: #ede9fe; color: #6b21a8; }

    .category-release { background: #f3f4f6; color: #374151; }
    .category-major-release { background: #fee2e2; color: #dc2626; }
    .category-update { background: #dbeafe; color: #2563eb; }
    .category-hotfix { background: #fed7d7; color: #c53030; }

    .version-badge {
        background: #f59e0b;
        color: white;
    }

    .entry-title {
        font-size: 2.5rem;
        font-weight: 800;
        color: #1f2937;
        line-height: 1.2;
        margin-bottom: 1.5rem;
    }

    .entry-info {
        display: flex;
        align-items: center;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
        color: #6b7280;
        font-size: 1rem;
    }

    .entry-date {
        font-weight: 500;
    }

    .entry-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .tag {
        background: #f3f4f6;
        color: #374151;
        padding: 0.375rem 0.75rem;
        border-radius: 6px;
        font-size: 0.875rem;
        font-weight: 500;
    }

    .document-info-section {
        background: white;
        padding: 2.5rem;
        border-radius: 16px;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
        margin-bottom: 2rem;
        border: 1px solid #e5e7eb;
    }

    .document-info-section h2 {
        font-size: 1.5rem;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .document-info-section h2::before {
        content: "📋";
        font-size: 1.25rem;
    }

    .document-info-table {
        overflow-x: auto;
    }

    .document-info-table table {
        width: 100%;
        border-collapse: collapse;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .document-info-table tbody tr:nth-child(even) {
        background-color: #f8fafc;
    }

    .document-info-table tbody tr:hover {
        background-color: #f1f5f9;
    }

    .field-label {
        background-color: #635bff;
        color: white;
        font-weight: 600;
        padding: 1rem 1.5rem;
        text-align: right;
        width: 200px;
        vertical-align: top;
        border-right: 2px solid #5a52ff;
    }

    .field-value {
        padding: 1rem 1.5rem;
        color: #374151;
        line-height: 1.6;
        vertical-align: top;
    }

    .version-history {
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
        font-size: 0.875rem;
        background-color: #f9fafb;
    }

    .related-files {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .file-link a {
        color: #635bff;
        text-decoration: none;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
        transition: color 0.15s ease;
    }

    .file-link a::before {
        content: "📄";
        font-size: 0.875rem;
    }

    .file-link a:hover {
        color: #5a52ff;
        text-decoration: underline;
    }

    .file-text {
        color: #6b7280;
        font-style: italic;
    }

    .entry-content {
        background: white;
        padding: 2.5rem;
        border-radius: 16px;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
        margin-bottom: 3rem;
        border: 1px solid #e5e7eb;
    }

    .prose {
        max-width: none;
        line-height: 1.7;
        color: #374151;
    }

    .prose :global(h1) {
        font-size: 2rem;
        font-weight: 700;
        color: #1f2937;
        margin-top: 2rem;
        margin-bottom: 1rem;
        line-height: 1.3;
    }

    .prose :global(h2) {
        font-size: 1.5rem;
        font-weight: 600;
        color: #1f2937;
        margin-top: 2rem;
        margin-bottom: 1rem;
        line-height: 1.3;
    }

    .prose :global(h3) {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1f2937;
        margin-top: 1.5rem;
        margin-bottom: 0.75rem;
        line-height: 1.3;
    }

    .prose :global(p) {
        margin-bottom: 1.5rem;
    }

    .prose :global(ul), .prose :global(ol) {
        margin-bottom: 1.5rem;
        padding-left: 2rem;
    }

    .prose :global(li) {
        margin-bottom: 0.5rem;
    }

    .prose :global(code) {
        background: #f3f4f6;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.875rem;
        color: #dc2626;
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    }

    .prose :global(pre) {
        background: #1f2937;
        color: #f9fafb;
        padding: 1.5rem;
        border-radius: 8px;
        overflow-x: auto;
        margin-bottom: 1.5rem;
    }

    .prose :global(pre code) {
        background: none;
        padding: 0;
        color: inherit;
    }

    .prose :global(blockquote) {
        border-left: 4px solid #635bff;
        padding: 1rem 0 1rem 2rem;
        margin: 1.5rem 0;
        background: #f8fafc;
        font-style: italic;
        color: #6b7280;
    }

    .prose :global(table) {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 1.5rem;
    }

    .prose :global(th), .prose :global(td) {
        border: 1px solid #e5e7eb;
        padding: 0.75rem 1rem;
        text-align: left;
    }

    .prose :global(th) {
        background: #f9fafb;
        font-weight: 600;
    }

    .related-entries {
        margin-bottom: 3rem;
    }

    .related-entries h2 {
        font-size: 1.5rem;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 1.5rem;
    }

    .related-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .related-entry {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        border: 1px solid #e5e7eb;
        transition: all 0.15s ease;
    }

    .related-entry:hover {
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);
        transform: translateY(-2px);
    }

    .related-meta {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .related-entry h3 {
        font-size: 1.125rem;
        font-weight: 600;
        margin-bottom: 0.75rem;
        line-height: 1.3;
    }

    .related-entry h3 a {
        color: #1f2937;
        text-decoration: none;
        transition: color 0.15s ease;
    }

    .related-entry h3 a:hover {
        color: #635bff;
    }

    .related-date {
        display: block;
        font-size: 0.875rem;
        color: #6b7280;
        margin-bottom: 0.75rem;
    }

    .related-excerpt {
        font-size: 0.875rem;
        color: #6b7280;
        line-height: 1.5;
    }

    .entry-navigation {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 2rem;
        padding: 2rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        border: 1px solid #e5e7eb;
    }

    .back-link {
        color: #635bff;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.15s ease;
    }

    .back-link:hover {
        color: #5a52ff;
    }

    .share-links {
        display: flex;
        align-items: center;
        gap: 1rem;
        font-size: 0.875rem;
    }

    .share-link {
        color: #6b7280;
        text-decoration: none;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        transition: all 0.15s ease;
        border: 1px solid #e5e7eb;
        background: #f9fafb;
        cursor: pointer;
        font-size: 0.875rem;
    }

    .share-link:hover {
        background: #f3f4f6;
        color: #374151;
    }

    .share-link.twitter:hover {
        background: #1da1f2;
        color: white;
        border-color: #1da1f2;
    }

    .share-link.linkedin:hover {
        background: #0077b5;
        color: white;
        border-color: #0077b5;
    }

    /* RTL Styles */
    [dir="rtl"] .breadcrumb {
        flex-direction: row-reverse;
    }

    [dir="rtl"] .entry-meta {
        flex-direction: row-reverse;
    }

    [dir="rtl"] .entry-info {
        flex-direction: row-reverse;
    }

    [dir="rtl"] .entry-navigation {
        flex-direction: row-reverse;
    }

    [dir="rtl"] .share-links {
        flex-direction: row-reverse;
    }

    [dir="rtl"] .prose :global(ul), [dir="rtl"] .prose :global(ol) {
        padding-right: 2rem;
        padding-left: 0;
    }

    [dir="rtl"] .prose :global(blockquote) {
        border-right: 4px solid #635bff;
        border-left: none;
        padding: 1rem 2rem 1rem 0;
    }

    [dir="rtl"] .field-label {
        text-align: left;
        border-left: 2px solid #5a52ff;
        border-right: none;
    }

    [dir="rtl"] .document-info-section h2 {
        flex-direction: row-reverse;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .changelog-container {
            padding: 0 1rem;
        }

        .entry-header, .entry-content, .document-info-section {
            padding: 1.5rem;
        }

        .field-label {
            width: 120px;
            font-size: 0.875rem;
            padding: 0.75rem 1rem;
        }

        .field-value {
            padding: 0.75rem 1rem;
            font-size: 0.875rem;
        }

        .document-info-table {
            font-size: 0.875rem;
        }

        .entry-title {
            font-size: 2rem;
        }

        .entry-info {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }

        .related-grid {
            grid-template-columns: 1fr;
        }

        .entry-navigation {
            flex-direction: column;
            align-items: stretch;
            gap: 1rem;
        }

        .share-links {
            justify-content: center;
        }

        .breadcrumb {
            flex-wrap: wrap;
        }
    }
</style>