# GitLab CI/CD Pipeline for noqodi Documentation
# This pipeline includes automatic changelog generation

stages:
  - prepare
  - changelog
  - build
  - test
  - deploy

variables:
  NODE_VERSION: "18"
  DOCKER_IMAGE: "node:18-alpine"

# Cache node modules for faster builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .pnpm-store/

# Install dependencies
prepare:
  stage: prepare
  image: $DOCKER_IMAGE
  before_script:
    - npm install -g pnpm
  script:
    - pnpm config set store-dir .pnpm-store
    - pnpm install --frozen-lockfile
  artifacts:
    paths:
      - node_modules/
      - .pnpm-store/
    expire_in: 1 hour

# Generate changelog from Git history and releases
generate_changelog:
  stage: changelog
  image: $DOCKER_IMAGE
  dependencies:
    - prepare
  before_script:
    - apk add --no-cache git jq curl
    - npm install -g pnpm
  script:
    - echo "Generating changelog from Git history..."
    
    # Create changelog directory if it doesn't exist
    - mkdir -p src/content/docs/en/changelogs
    - mkdir -p src/content/docs/ar/changelogs
    
    # Get latest release info from GitLab API
    - |
      if [ -n "$CI_PROJECT_ID" ] && [ -n "$GITLAB_TOKEN" ]; then
        echo "Fetching release information from GitLab API..."
        
        # Get latest releases
        RELEASES=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases?per_page=10")
        
        # Get recent commits since last release
        LAST_RELEASE_TAG=$(echo "$RELEASES" | jq -r '.[0].tag_name // "HEAD~50"')
        
        echo "Processing commits since: $LAST_RELEASE_TAG"
        
        # Generate changelog entry for current build
        cat > changelog_template.sh << 'EOL'
      #!/bin/sh
      
      # Extract commit information
      COMMIT_RANGE="${LAST_RELEASE_TAG}..HEAD"
      DATE=$(date +%Y-%m-%d)
      VERSION=${CI_COMMIT_TAG:-"dev-${CI_COMMIT_SHORT_SHA}"}
      BUILD_NUMBER=${CI_PIPELINE_ID:-"local"}
      
      # Determine change type based on commit messages
      CHANGE_TYPE="platform"
      CATEGORY="update"
      
      if git log --oneline $COMMIT_RANGE | grep -i "api\|endpoint"; then
        CHANGE_TYPE="api"
      elif git log --oneline $COMMIT_RANGE | grep -i "sdk\|library"; then
        CHANGE_TYPE="sdk"
      elif git log --oneline $COMMIT_RANGE | grep -i "docs\|documentation"; then
        CHANGE_TYPE="documentation"
      fi
      
      if [ -n "$CI_COMMIT_TAG" ]; then
        if echo "$CI_COMMIT_TAG" | grep -E "^v[0-9]+\.0\.0"; then
          CATEGORY="major-release"
        else
          CATEGORY="release"
        fi
      elif git log --oneline $COMMIT_RANGE | grep -i "hotfix\|critical"; then
        CATEGORY="hotfix"
      fi
      
      # Extract meaningful changes
      FEATURES=$(git log $COMMIT_RANGE --grep="feat\|feature" --oneline --pretty=format:"- %s" | head -5)
      FIXES=$(git log $COMMIT_RANGE --grep="fix\|bug" --oneline --pretty=format:"- %s" | head -5)
      IMPROVEMENTS=$(git log $COMMIT_RANGE --grep="improve\|enhance\|update" --oneline --pretty=format:"- %s" | head -5)
      
      # Generate English changelog
      cat > "src/content/docs/en/changelogs/${DATE}-${CHANGE_TYPE}-${CI_COMMIT_SHORT_SHA}.md" << EOF
      ---
      title: "${CHANGE_TYPE^} Updates - $(date '+%B %d, %Y')"
      date: "${DATE}"
      version: "${VERSION}"
      type: "${CHANGE_TYPE}"
      category: "${CATEGORY}"
      author: "noqodi Development Team"
      tags: ["${CHANGE_TYPE}", "ci-cd", "automated"]
      ---
      
      # ${CHANGE_TYPE^} Updates - $(date '+%B %d, %Y')
      
      **Release Version:** ${VERSION}  
      **Release Date:** $(date '+%B %d, %Y')  
      **Type:** ${CHANGE_TYPE^} Update
      
      ## 🔄 Changes in this Release
      
      This release includes the following changes:
      
      ### 🚀 New Features
      ${FEATURES:-"- No new features in this release"}
      
      ### 🐛 Bug Fixes
      ${FIXES:-"- No bug fixes in this release"}
      
      ### 🔧 Improvements
      ${IMPROVEMENTS:-"- General improvements and maintenance"}
      
      ## 📊 Build Information
      
      - **Build Number**: #${BUILD_NUMBER}
      - **Commit Range**: \`${COMMIT_RANGE}\`
      - **Pipeline**: [${CI_PIPELINE_ID}](${CI_PIPELINE_URL})
      - **Commit**: [${CI_COMMIT_SHORT_SHA}](${CI_PROJECT_URL}/-/commit/${CI_COMMIT_SHA})
      
      ## 🔗 Related Links
      
      - [View Full Commit History](${CI_PROJECT_URL}/-/commits/${CI_COMMIT_REF_NAME})
      - [Pipeline Details](${CI_PIPELINE_URL})
      
      ---
      
      **Generated automatically from GitLab CI/CD Pipeline**  
      **Commit**: \`${CI_COMMIT_SHORT_SHA}\`  
      **Build**: #${BUILD_NUMBER}
      EOF
      
      # Generate Arabic changelog (simplified translation)
      cat > "src/content/docs/ar/changelogs/${DATE}-${CHANGE_TYPE}-${CI_COMMIT_SHORT_SHA}.md" << EOF
      ---
      title: "تحديثات ${CHANGE_TYPE} - $(date '+%B %d, %Y')"
      date: "${DATE}"
      version: "${VERSION}"
      type: "${CHANGE_TYPE}"
      category: "${CATEGORY}"
      author: "فريق تطوير نقودي"
      tags: ["${CHANGE_TYPE}", "ci-cd", "تلقائي"]
      ---
      
      # تحديثات ${CHANGE_TYPE} - $(date '+%B %d, %Y')
      
      **إصدار الإطلاق:** ${VERSION}  
      **تاريخ الإطلاق:** $(date '+%B %d, %Y')  
      **النوع:** تحديث ${CHANGE_TYPE}
      
      ## 🔄 التغييرات في هذا الإصدار
      
      يتضمن هذا الإصدار التغييرات التالية:
      
      ### 🚀 ميزات جديدة
      ${FEATURES:-"- لا توجد ميزات جديدة في هذا الإصدار"}
      
      ### 🐛 إصلاحات الأخطاء
      ${FIXES:-"- لا توجد إصلاحات أخطاء في هذا الإصدار"}
      
      ### 🔧 التحسينات
      ${IMPROVEMENTS:-"- تحسينات عامة وصيانة"}
      
      ## 📊 معلومات البناء
      
      - **رقم البناء**: #${BUILD_NUMBER}
      - **نطاق الالتزام**: \`${COMMIT_RANGE}\`
      - **خط الأنابيب**: [${CI_PIPELINE_ID}](${CI_PIPELINE_URL})
      - **الالتزام**: [${CI_COMMIT_SHORT_SHA}](${CI_PROJECT_URL}/-/commit/${CI_COMMIT_SHA})
      
      ## 🔗 روابط ذات صلة
      
      - [عرض تاريخ الالتزام الكامل](${CI_PROJECT_URL}/-/commits/${CI_COMMIT_REF_NAME})
      - [تفاصيل خط الأنابيب](${CI_PIPELINE_URL})
      
      ---
      
      **تم إنشاؤه تلقائياً من خط أنابيب GitLab CI/CD**  
      **الالتزام**: \`${CI_COMMIT_SHORT_SHA}\`  
      **البناء**: #${BUILD_NUMBER}
      EOF
      
      echo "Generated changelog entries:"
      echo "- src/content/docs/en/changelogs/${DATE}-${CHANGE_TYPE}-${CI_COMMIT_SHORT_SHA}.md"
      echo "- src/content/docs/ar/changelogs/${DATE}-${CHANGE_TYPE}-${CI_COMMIT_SHORT_SHA}.md"
      EOL
        
        chmod +x changelog_template.sh
        ./changelog_template.sh
        
      else
        echo "GitLab API token not available, creating sample changelog..."
        
        # Create sample changelog entry
        DATE=$(date +%Y-%m-%d)
        cat > "src/content/docs/en/changelogs/${DATE}-build-${CI_COMMIT_SHORT_SHA}.md" << EOF
      ---
      title: "Build Update - $(date '+%B %d, %Y')"
      date: "${DATE}"
      version: "build-${CI_COMMIT_SHORT_SHA}"
      type: "platform"
      category: "update"
      author: "CI/CD Pipeline"
      tags: ["build", "automated"]
      ---
      
      # Build Update - $(date '+%B %d, %Y')
      
      **Build**: #${CI_PIPELINE_ID:-"local"}  
      **Commit**: ${CI_COMMIT_SHORT_SHA}  
      **Date**: $(date '+%B %d, %Y')
      
      This is an automated build update generated during the CI/CD process.
      
      ## Changes
      
      - Documentation updates
      - Build improvements
      - General maintenance
      
      ---
      
      **Generated from CI/CD Pipeline**
      EOF
        
      fi
    
    # Validate generated files
    - |
      echo "Validating generated changelog files..."
      for file in src/content/docs/*/changelogs/*.md; do
        if [ -f "$file" ]; then
          echo "✓ Generated: $file"
          # Check if file has valid frontmatter
          if head -n 10 "$file" | grep -q "^---$"; then
            echo "  ✓ Valid frontmatter detected"
          else
            echo "  ⚠ Warning: No frontmatter detected in $file"
          fi
        fi
      done
    
  artifacts:
    paths:
      - src/content/docs/en/changelogs/
      - src/content/docs/ar/changelogs/
    expire_in: 1 week
    reports:
      dotenv: changelog.env
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
    - if: $CI_MERGE_REQUEST_IID

# Build the Astro documentation site
build:
  stage: build
  image: $DOCKER_IMAGE
  dependencies:
    - prepare
    - generate_changelog
  before_script:
    - npm install -g pnpm
  script:
    - echo "Building Astro documentation site..."
    - pnpm config set store-dir .pnpm-store
    - pnpm run build
    
    # Validate build output
    - |
      if [ -d "dist" ]; then
        echo "✓ Build successful - dist directory created"
        echo "Build size: $(du -sh dist)"
        
        # Check for changelog pages
        if find dist -name "*changelog*" -type f | head -5; then
          echo "✓ Changelog pages found in build output"
        else
          echo "⚠ Warning: No changelog pages found in build output"
        fi
      else
        echo "✗ Build failed - no dist directory found"
        exit 1
      fi
  artifacts:
    paths:
      - dist/
    expire_in: 1 day

# Run tests and linting
test:
  stage: test
  image: $DOCKER_IMAGE
  dependencies:
    - prepare
  before_script:
    - npm install -g pnpm
  script:
    - echo "Running tests and linting..."
    - pnpm config set store-dir .pnpm-store
    
    # Run linting if script exists
    - |
      if pnpm run --if-present lint; then
        echo "✓ Linting passed"
      else
        echo "⚠ No linting script found or linting failed"
      fi
    
    # Run type checking if script exists
    - |
      if pnpm run --if-present typecheck; then
        echo "✓ Type checking passed"  
      else
        echo "⚠ No type checking script found or type checking failed"
      fi
    
    # Test changelog generation
    - |
      echo "Testing changelog functionality..."
      if [ -f "src/utils/changelog.ts" ]; then
        echo "✓ Changelog utilities found"
      else
        echo "⚠ Changelog utilities not found"
      fi
      
      # Check for changelog content
      CHANGELOG_COUNT=$(find src/content/docs -name "*.md" -path "*/changelogs/*" | wc -l)
      echo "Found $CHANGELOG_COUNT changelog entries"
      
      if [ "$CHANGELOG_COUNT" -gt 0 ]; then
        echo "✓ Changelog entries exist"
      else
        echo "⚠ No changelog entries found"
      fi
  allow_failure: true

# Deploy to staging/production
deploy_staging:
  stage: deploy
  image: $DOCKER_IMAGE
  dependencies:
    - build
  script:
    - echo "Deploying to staging environment..."
    - echo "Build artifacts ready for deployment"
    - echo "Changelog pages included in deployment"
  environment:
    name: staging
    url: https://staging-docs.noqodi.com
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy_production:
  stage: deploy
  image: $DOCKER_IMAGE
  dependencies:
    - build
  script:
    - echo "Deploying to production environment..."
    - echo "Build artifacts ready for deployment"
    - echo "Changelog pages included in deployment"
  environment:
    name: production
    url: https://docs.noqodi.com
  rules:
    - if: $CI_COMMIT_TAG
  when: manual

# Cleanup job for old changelog entries (optional)
cleanup_old_changelogs:
  stage: deploy
  image: $DOCKER_IMAGE
  script:
    - echo "Cleaning up old changelog entries..."
    - |
      # Keep only last 100 changelog entries per language to prevent repo bloat
      for lang in en ar; do
        CHANGELOG_DIR="src/content/docs/$lang/changelogs"
        if [ -d "$CHANGELOG_DIR" ]; then
          cd "$CHANGELOG_DIR"
          # Get files sorted by date (newest first), skip first 100, delete the rest
          ls -t *.md 2>/dev/null | tail -n +101 | xargs -r rm -f
          echo "Cleaned up old changelog entries for $lang"
          cd - > /dev/null
        fi
      done
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "schedule"
  when: manual